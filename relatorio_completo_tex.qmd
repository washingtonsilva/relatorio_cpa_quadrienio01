---
lang: pt
format:
  pdf:
    include-before-body:
      - file: pre_textuais.tex
    include-in-header:
      - text: |
          \usepackage{indentfirst}
          \usepackage{microtype}
    documentclass: report
    papersize: a4
    geometry:
      - top = 3cm
      - bottom = 2cm
      - left = 2cm
      - right = 2cm
    fontsize: 12pt
    linestretch: 1.25
    indent: true
    toc: true
    toc-title: Sumário
    toc-depth: 3
    number-sections: true
    fig-cap-location: bottom
    tbl-cap-location: top
    fig-dpi: 300
    fig-pos: "H"
    fig-align: "center"
    tbl-pos: "H" 
    tbl-align: "center" 
    lof: true
    lot: true
execute: 
  echo: false
  warning: false
  message: false
crossref:
  fig-prefix: 'Fig.'
  tbl-prefix: 'Tab.'
bibliography: referencias.bibtex
csl: associacao-brasileira-de-normas-tecnicas-ipea.csl
editor: source
---


```{r}
#| label: setup 
#| echo: false

# pacotes necessarios
library(here)       # para usar caminhos relativos 
library(tidyverse)  # para usar funções do dplyr, readr...
library(scales)     # para anotações em gráficos
library(patchwork)  # para organizar graficos ggplot2
library(ggdist)     # para grafico stat_halfeye
library(ggthemes)   # para temas com ggplot2
library(kableExtra)         # para criar tabelas

# importa os arquivos de dados

## discentes
path_discentes <- here::here("dados/limpos/dados_discentes_egressos.rds")
dados_discentes <- readr::read_rds(path_discentes)

## docentes
path_docentes <- here::here("dados/limpos/dados_docentes.rds")
dados_docentes <- readr::read_rds(path_docentes)
```



# Composição da Comissão Própria de Avaliação (CPA)




# Introdução 

@cruz_gonzalez_2017



# Planejamento Estratégico de Autoavaliação 

## Cronograma de Trabalho da CPA

## 




# Metodologia 

## Metodologia Aplicada ao Processo de Autoavaliação 

## Instrumentos

## Segmentos da Comunidade Acadêmica 

## Técnicas Utilizadas para Análise dos Dados 




# Avaliação 

## Corpo Discente

### Características dos Discentes


```{r}
#| label: tab-dis01
#| tbl-cap: "Estatísticas das idades (em anos) dos participantes da pesquisa."

# Criar tabela de estatísticas descritivas
dados_discentes %>%
  summarise(
    `Idade média` = mean(q3),
    `Idade mediana` = median(q3),
    `Idade mínima` = min(q3),
    `1º Quartil` = quantile(q3, 0.25),
    `3º Quartil` = quantile(q3, 0.75),
    `Idade máxima` = max(q3),
    `Desvio padrão` = sd(q3)
  ) %>%
  t() %>%
  as.data.frame() %>%
  kbl(
    col.names = c("Estatística", "Valor"),
    digits = 1,
    booktabs = TRUE,
    linesep = "",
    align = c("l", "c")
  ) %>%
  kable_styling(
    latex_options = c("striped", "hold_position"),
    full_width = FALSE,
    position = "center",
    bootstrap_options = "striped"
  ) %>%
  column_spec(1, width = "4cm") %>%
  column_spec(2, width = "3cm") %>%
  footnote(
    general = "Fonte: Comissão Própria de Avaliação.",
    general_title = "",
    footnote_as_chunk = TRUE,
    threeparttable = TRUE
  )
```


```{r}
#| label: fig-dis01
#| fig-cap: "Distribuição dos participantes da pesquisa que exercem alguma atividade profissional remunerada."
#| fig-width: 6
#| fig-height: 6

# Carregar pacotes necessários
library(ggplot2)
library(dplyr)

# Criar tabela de frequência para atividade profissional
ativ_tab <- dados_discentes %>%
  count(q5) %>%
  mutate(
    fraction = n / sum(n),  # Calcula a fração de cada categoria
    ymax = cumsum(fraction),  # Calcula o máximo de cada retângulo
    ymin = c(0, head(ymax, n = -1)),  # Calcula o mínimo de cada retângulo
    labelPosition = (ymax + ymin) / 2,  # Posição do rótulo
    label = paste0(q5, "\n", scales::percent(fraction, accuracy = 0.1))  # Rótulo com porcentagem
  )

# Define cores manualmente para cada resposta
cores <- c(
  "Sim" = "#E69F00",  # Laranja para "Sim"
  "Não" = "#999999"   # Cinza para "Não"
)

# Criar o gráfico donut
ggplot(ativ_tab, aes(ymax = ymax, ymin = ymin, xmax = 4, xmin = 3, fill = q5)) +
  geom_rect(color = "white") +  # Retângulos para as fatias do donut
  geom_label(
    x = 3.5,  # Posição dos rótulos (no meio do donut)
    aes(y = labelPosition, label = label),
    size = 5,  # Tamanho da fonte dos rótulos
    fontface = "bold",  # Fonte em negrito
    color = "black"  # Cor do texto
  ) +
  scale_fill_manual(values = cores) +  # Aplica as cores definidas
  coord_polar(theta = "y") +  # Converte para coordenadas polares (donut)
  xlim(c(2, 4)) +  # Define o raio interno (2) e externo (4) do donut
  theme_void() +  # Remove todos os elementos desnecessários do gráfico
  theme(legend.position = "none") +  # Remove a legenda
  labs(
    title = "Você exerce alguma atividade profissional remunerada?",
    caption = "Fonte: Comissão Própria de Avaliação"
  ) +
  theme(
    plot.title = element_text(size = 12, face = "bold", hjust = 1),  # Personaliza o título
    plot.caption = element_text(size = 10)  # Personaliza a legenda
  )
```




```{r}
#| label: fig-dis02a
#| fig-cap: "Atividades remuneradas exercidas pelos participantes da pesquisa."
#| fig-width: 8  # Reduzindo a largura do gráfico
#| fig-height: 5 # Reduzindo a altura do gráfico

# Pré-processamento dos dados
dados_discentes <- dados_discentes %>%
  mutate(q6 = factor(
    case_when(
      q6 == "Não tenho no momento." ~ NA_character_,
      q6 %in% c("Professor", "Professora universitária") ~ "Professor(a)",
      q6 %in% c(
        "Funcionário Público - Agento de Correios",
        "Servidor Público",
        "Servidora Pública"
      ) ~ "Servidor(a) Público(a)",
      TRUE ~ as.character(q6)
    )
  ))

# Criar tabela de frequência
ativ_tab <- dados_discentes %>%
  filter(!is.na(q6)) %>%
  count(q6, sort = TRUE) %>%
  mutate(q6 = fct_rev(fct_inorder(q6))) %>%
  mutate(perc = n / sum(n))

# Define cores manualmente para cada resposta
cores <- c(
  "Contador" = "#E69F00",
  "Professor(a)" = "#E69F00",
  "Servidor(a) Público(a)" = "#E69F00",
  "Gerente de Relacionamento" = "#999999",
  "Supervisor de Suprimentos" = "#999999",
  "Instrutora de formação profissional" = "#999999"
)

# Cria gráfico lollipop
ggplot(ativ_tab, aes(x = perc, y = q6)) +
  geom_segment(aes(
    x = 0,
    xend = perc,
    y = q6,
    yend = q6,
    color = q6
  ), linewidth = 1.2) +  # altera a espessura da linha
  geom_point(aes(color = q6), size = 5) +  # altera o tamanho dos pontos
  geom_text(
    aes(label = scales::percent(perc, accuracy = 0.1)),
    vjust = -1,  # ajusta a posição vertical do texto
    hjust = -0.2,
    size = 4,  # ajusta o tamanho da fonte do texto
    fontface = "bold"
  ) +
  scale_color_manual(values = cores) +
  scale_x_continuous(
    expand = expansion(mult = c(0, 0.1)),  # ajusta a expansão do eixo X
    limits = c(0, 0.8),
    labels = scales::label_percent()
  ) +
  labs(
    title = "Em caso de possuir atividade profissional, por favor especifique qual.",
    caption = "Fonte: Comissão Própria de Avaliação",
    x = "Porcentagem de participantes",
    y = NULL
  ) +
  theme_classic() +
  theme(
    text = element_text(family = "sans"),
    legend.position = "none",
    # Reduzindo o tamanho da fonte do título
    plot.title = element_text(size = 12, face = "bold", hjust = 0.8),  
    plot.subtitle = element_text(size = 8),
    # Reduzindo o tamanho da fonte do eixo Y
    axis.text.y = element_text(size = 12, face = "bold"),  
    # Reduzindo o tamanho da fonte do eixo X
    axis.text.x = element_text(size = 10),  
    # Reduzindo a espessura da linha do eixo Y
    axis.line.y = element_line(color = "grey80", linewidth = .3), 
    # Reduzindo a espessura dos ticks do eixo Y
    axis.ticks.y = element_line(color = "grey80", linewidth = .3),  
    # Reduzindo a espessura da linha do eixo X
    axis.line.x = element_line(color = "grey80", linewidth = .3),  
    # Reduzindo a espessura dos ticks do eixo X
    axis.ticks.x = element_line(color = "grey80", linewidth = .3),  
    axis.title.y = element_blank(),
    # Reduzindo o tamanho da fonte da legenda
    plot.caption = element_text(size = 9),  
    # Reduzindo as margens do gráfico
    plot.margin = margin(t = 10, r = 10, b = 10, l = 10, unit = "pt")  
  )
```




### Avaliação do Programa


```{r}
#| label: fig-dis03
#| fig-cap: "Percepção discente sobre a interdisciplinaridade no curso."
#| fig-width: 7.5
#| fig-height: 4.5

# Definir todos os níveis possíveis da escala Likert
q7_levels <- c(
  "Discordo Totalmente",
  "Discordo Parcialmente",
  "Não Concordo, Nem Discordo",
  "Concordo Parcialmente",
  "Concordo Totalmente"
)

# Criar a tabela de frequência para a variável q7, incluindo níveis não utilizados
q7_summary <- dados_discentes %>%
  count(q7, sort = TRUE) %>%
  complete(q7 = q7_levels, fill = list(n = 0)) %>%  # Adicionar níveis não utilizados com 0
  mutate(q7 = factor(q7, levels = q7_levels)) %>%
  mutate(
    percent_answers = n / sum(n),
    percent_answers_label = percent(percent_answers, accuracy = 1)
  )

# Criar dados para o gráfico de barras divergentes
q7_summary_diverging <- q7_summary %>%
  mutate(percent_answers = if_else(
    q7 %in% c("Concordo Totalmente", "Concordo Parcialmente"),
    percent_answers,
    -percent_answers
  )) %>%
  mutate(percent_answers_label = if_else(percent_answers == 0, "0%", percent(abs(percent_answers), accuracy = 1)))

# Criar o gráfico de barras divergentes
ggplot(q7_summary_diverging, aes(x = q7, y = percent_answers, fill = q7)) +
  geom_col() +
  geom_text(
    aes(
      label = percent_answers_label,
      hjust = if_else(percent_answers == 0, -0.2, 0.5)
    ),
    position = position_stack(vjust = 0.5),
    color = if_else(q7_summary_diverging$percent_answers == 0, "black", "white"),
    fontface = "bold",
    size = 3.5
  ) +
  coord_flip() +
  scale_x_discrete() +
  scale_fill_manual(
    values = c(
      "Discordo Totalmente" = "#EE6677",
      "Discordo Parcialmente" = "#CCBB44",
      "Não Concordo, Nem Discordo" = "grey80",
      "Concordo Parcialmente" = "#66CCEE",
      "Concordo Totalmente" = "#4477AA"
    )
  ) +
  theme_minimal() +
  theme(
    text = element_text(family = "sans"),
    plot.title = element_text(size = 10, face = "bold", hjust = 0),
    axis.text.x = element_blank(),
    axis.title.x = element_blank(),
    axis.text.y = element_text(size = 9, face = "bold"),
    panel.grid = element_blank(),
    legend.position = "none",
    plot.margin = margin(
      t = 15,
      r = 15,
      b = 15,
      l = 15,
      unit = "pt"
    ),
    plot.caption = element_text(size = 9)
  ) +
  labs(
    title = "O curso utiliza ações de promoção da interdisciplinaridade?",
    caption = "Fonte: Comissão Própria de Avaliação",
    x = NULL,
    fill = NULL
  )
```









## Corpo Docente 

## Egressos




# Ações Demandadas a Partir da Autoavaliação




# Considerações Finais




# Referências {.unnumbered}

::: {#refs}
:::




# Apêndice A {.unnumbered}


